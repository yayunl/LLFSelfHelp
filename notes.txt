############################
## Database relationships ##
############################

Summary
1. Many-to-many relationships: use `ManytoManyField` on either side
2. Many-to-one relationships: use `ForeignKey` on many side
3. One-to-one relationships: use `OneToOneField` on either side


Breakdown
---------------------------------------------------
1. Many-to-many relationships: use ManytoManyField
---------------------------------------------------

*Definition:

class Publication(models.Model):
    title = models.CharField(max_length=30)

class Article(models.Model):
    headline = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication) <-- use ManyToManyField on either side

*Methods (add, create, list, etc.):
p1 = Publication(title='The Python Journal')
p2 = Publication(title='The Java Journal')
p1.save()
p2.save()
a1 = Article(headline='Django lets you build Web apps easily')
a2 = Article(headline='Flask lets you build Web apps easily')
a1.save()
a2.save()

** add
a1.publications.add(p1, p2)
p2.article_set.add(a2)

** create
new_publication = a1.publications.create(title='new publication')
new_article = p3.article_set.create(headline='new article')

** list all
a1.publications.all()
p1.article_set.all()
Publication.objects.get(id=4).article_set.all()

** filter/query
Article.objects.filter(publications__title__startswith="Science").count()
Publication.objects.filter(article__headline__startswith="NASA")

** delete
a1.publications.remove(p1)
p2.article_set.remove(a2)

*** bulk delete
Publication.objects.filter(title__startswith='Science').delete()
Article.objects.filter(headline__startswith='Django').delete()

# set relation
a1.publications.set([p2])

# clear set
a1.publications.clear()
p2.article_set.clear()

---------------------------------------------------
2. Many-to-one relationships: use ForeignKey
---------------------------------------------------

* Definition: one reporter has many articles

class Reporter(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField()

class Article(models.Model):
    headline = models.CharField(max_length=100)
    pub_date = models.DateField()
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE) <-- Use ForeignKey on the `many` side

* Methods
r1 = Reporter(first_name='John', last_name='Smith', email='john@example.com')
r2 = Reporter(first_name='Paul', last_name='Jones', email='paul@example.com')
r1.save()
r2.save()

a = Article.objects.create(headline="This is a test", pub_date=date(2005, 7, 27), reporter=r2)

** access
r = a.reporter
articles = r1.article_set.all()

** create
new_article = r.article_set.create(headline="John's second story", pub_date=date(2005, 7, 29))
new_article2 = Article.objects.create(headline="Paul's story", pub_date=date(2006, 1, 17), reporter=r)

** add
r2.article_set.add(new_article2)

** list all
r2.article_set.all()

** list count
r2.article_set.count()

** filter/query
r.article_set.filter(headline__startswith='This')

Article.objects.filter(reporter__first_name='John', reporter__last_name='Smith')
Reporter.objects.filter(article__headline__startswith='This')

** delete
(Note: If the `one` side instance is deleted, its corresponding `many` will be deleted with default `CASCADE`)
 r2.delete()
 Reporter.objects.filter(article__headline__startswith='This').delete()

-----------------------------------------------
3. One-to-one relationships: use OneToOneField
-----------------------------------------------

* Definition
For example, a Place optionally can be a Restaurant.

class Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)

class Restaurant(models.Model):
    place = models.OneToOneField(
        Place,
        on_delete=models.CASCADE,
        primary_key=True,
    )  <------- Use `OneToOneField` to define the relationship

* Methods
p1 = Place(name='Demon Dogs', address='944 W. Fullerton')
p2 = Place(name='Ace Hardware', address='1013 N. Ashland')
p1.save()
p2.save()

** create
restaurant = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)
restaurant.save()

** access
p = restaurant.place
r = p1.restaurant  <--- restaurant as if an attribute defined in Place

*** verify access (returns Boolean)
hasattr(p1, 'restaurant')

** filter/query
Restaurant.objects.filter(place__name__startswith="Demon")
Place.objects.filter(restaurant=r)

############################
## Django 101             ##
############################
1. Create super user
python3 manage.py createsuperuser
2. Create database
python3 manage.py makemigrations
python3 manage.py migrate

3. Recreate the database
  a. Drop the tables
  b. Delete xxx_initial.py files in migrations folder
  c. on `Web` service, run python3 manage.py makemigrations && python3 manage.py migrate
  d. create super user using the following command:
  echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'password')" | python3 manage.py shell
  e. Create fake data  `python3 manage.py create_fake_data`

4. makemigrations dry run
python3 manage.py makemigrations APP --dry-run --verbosity 3

5. Create random data
  ** Create group `python3 manage.py create_group`
   i.e. python3 manage.py create_group 1 -g Xiyangyang -ds "Little Lamb group"

  ** Create service `python3 manage.py create_service`
   i.e. python3 manage.py create_service -c "Worship" -ds "Worship team" -dt "2020-07-30" -nt "New heart ministry"

  ** Create member `python3 manage.py create_user`
    i.e. Specific user: python3 manage.py create_user 1 -u yayun -e "krashilili0915@gmail.com" -p liu -n "Aaron Liu"
    i.e. Random users: python3 manage.py create_user 4

  e. Create superuser `python3 manage.py createsuperuser`


#################################
# Pycharm Dockerization setting #
#################################
1. Go to > File > Settings> Languages & frameworks > Django
Details: https://stackoverflow.com/questions/53753612/pycharm-no-manage-py-file-specified-in-settings-django-support-after-refactori/53782056
2. Setup pycharm to debug Django
Detials: https://testdriven.io/blog/django-debugging-pycharm/